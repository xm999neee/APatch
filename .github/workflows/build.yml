name: Build Manager

on:
  push:
    tags: [ "*" ]
    branches: [ "main" ]
    paths:
      - '.github/workflows/build.yml'
      - 'app/**'
      - 'apd/**'
      - 'build.gradle.kts'
      - 'gradle/libs.versions.toml'
  pull_request:
    branches: [ "main" ]
    paths:
      - '.github/workflows/build.yml'
      - 'app/**'
      - 'apd/**'
      - 'build.gradle.kts'
      - 'gradle/libs.versions.toml'
  workflow_call:
  workflow_dispatch:

jobs:
  build-manager:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version
        id: parse_version
        run: |
          COMMIT_NUM=$(git rev-list --count HEAD)
          VERSION=$(echo "$COMMIT_NUM + 200 + 10000" | bc)
          echo "Generated Version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Get commit info
        id: commit_info
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          COMMIT_DATE=$(git log -1 --pretty=format:'%ad' --date=short)
          echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_OUTPUT

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Setup ninja
        uses: seanmiddleditch/gha-setup-ninja@v6
        with:
          version: 1.12.1

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: ''

      - name: Install toolchain
        run: |
          rustup default stable
          rustup update stable
          cargo install cargo-ndk
          rustup target install aarch64-linux-android

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: apd
          cache-targets: false

      - name: Configure signing properties
        run: |
          echo "android.enableV1Signing=false" >> gradle.properties
          echo "android.enableV2Signing=false" >> gradle.properties
          echo "android.enableV3Signing=true" >> gradle.properties
          echo "android.enableV4Signing=true" >> gradle.properties

      - name: Build with Gradle
        run: |
          echo 'org.gradle.parallel=true' >> gradle.properties
          echo 'org.gradle.vfs.watch=true' >> gradle.properties
          echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
          echo 'android.native.buildOutput=verbose' >> gradle.properties
          sed -i 's/org.gradle.configuration-cache=true//g' gradle.properties
          ./gradlew clean assembleRelease

      - name: Custom Sign APK (v3+v4 only)
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        if: ${{ env.SIGNING_KEY != '' }}
        continue-on-error: true
        run: |
          # 创建临时密钥库文件
          echo "$SIGNING_KEY" | base64 --decode > /tmp/keystore.jks
          
          # 查找未签名的 APK 文件
          UNSIGNED_APK=$(find app/build/outputs/apk/release -name "*.apk" ! -name "*unsigned*" ! -name "*aligned*" | head -n 1)
          if [ -z "$UNSIGNED_APK" ]; then
            UNSIGNED_APK=$(find app/build/outputs/apk/release -name "*.apk" | head -n 1)
          fi
          
          if [ -z "$UNSIGNED_APK" ]; then
            echo "Error: No APK file found"
            exit 1
          fi
          
          echo "Found APK: $UNSIGNED_APK"
          
          # 使用 apksigner 进行 v3+v4 签名
          $ANDROID_HOME/build-tools/$(ls $ANDROID_HOME/build-tools/ | tail -n1)/apksigner sign \
            --ks /tmp/keystore.jks \
            --ks-pass pass:${{ secrets.KEY_STORE_PASSWORD }} \
            --key-pass pass:${{ secrets.KEY_PASSWORD }} \
            --ks-key-alias ${{ secrets.ALIAS }} \
            --v1-signing-enabled false \
            --v2-signing-enabled false \
            --v3-signing-enabled true \
            --v4-signing-enabled true \
            --out app/build/outputs/apk/release/app-signed-v3v4.apk \
            "$UNSIGNED_APK"
          
          # 验证签名
          $ANDROID_HOME/build-tools/$(ls $ANDROID_HOME/build-tools/ | tail -n1)/apksigner verify \
            --verbose \
            app/build/outputs/apk/release/app-signed-v3v4.apk
          
          echo "signedReleaseFile=app/build/outputs/apk/release/app-signed-v3v4.apk" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        if: ${{ env.SIGNING_KEY != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: APatch-v3v4-signed
          path: ${{steps.sign_app.outputs.signedReleaseFile}}

      - name: Create release body
        id: create_release_body
        run: |
          cat << EOF > release_body.md
          
          ## 构建信息
          - **版本号**: ${{ steps.parse_version.outputs.VERSION }}
          - **提交哈希**: ${{ steps.commit_info.outputs.COMMIT_HASH }}
          - **构建时间**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **触发事件**: ${{ github.event_name }}
    
          EOF
          
          # 读取文件内容到输出
          RELEASE_BODY=$(cat release_body.md)
          echo "RELEASE_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Release apk
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        if: ${{ env.SIGNING_KEY != '' && github.ref_type == 'tag' }}
        continue-on-error: true
        uses: ncipollo/release-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ steps.parse_version.outputs.VERSION }}
          name: "APatch v${{ steps.parse_version.outputs.VERSION }}"
          body: ${{ steps.create_release_body.outputs.RELEASE_BODY }}
          artifacts: ${{steps.sign_app.outputs.signedReleaseFile}}
          generateReleaseNotes: false
          makeLatest: true
          replacesArtifacts: true
